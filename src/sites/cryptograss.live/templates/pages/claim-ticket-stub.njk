{% extends "../base.njk" %}

{% block title %}Claim Ticket Stub #{{ tokenId }}{% endblock %}

{% block main %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="pixel-font mb-4">Claim Ticket Stub #{{ tokenId }}</h1>
            
            <!-- Ticket Stub and Show Info -->
            {% if show and ticketStub %}
            <div class="row mb-4 align-items-center">
                <div class="col-md-7">
                    <div class="ticket-stub-container responsive-ticket-stub">
                        {% set hideFoldout = true %}
                        {% include 'partials/ticketstub-front.njk' %}
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="show-info bg-white p-3 rounded shadow-sm">
                        <h2 class="pixel-font text-primary mb-2">{{ show.title }}</h2>
                        <div class="show-details">
                            <p class="mb-1 fs-5"><strong>{{ show.local_date }}</strong></p>
                            <p class="mb-2">{{ show.venue }}{% if show.locality %} â€¢ {{ show.locality }}, {{ show.region1 }}{% endif %}</p>
                            <p class="mb-0 text-muted">Block Height: {{ show.blockheight.toLocaleString() }}</p>
                            {% if show.poster %}
                                <div class="mt-3">
                                    <img src="{{ get_image(show.poster, 'thumbnail') }}" 
                                         alt="Show poster" 
                                         class="img-fluid rounded shadow-sm"
                                         style="max-height: 120px; object-fit: contain;">
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}
            
            {% if error %}
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Error!</h4>
                    <p>{{ error }}</p>
                </div>
            {% endif %}

            {% if success %}
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">Success!</h4>
                    <p>Your ticket stub has been claimed successfully!</p>
                    <p>Transaction hash: <code>{{ transactionHash }}</code></p>
                    <p>You can view your NFT on <a href="https://arbiscan.io/token/{{ contractAddress }}?a={{ tokenId }}" target="_blank">Arbiscan</a></p>
                </div>
            {% endif %}

            {% if not success and not error %}
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Ready to Claim</h5>
                        <p class="card-text">
                            You're about to claim ticket stub #{{ tokenId }} using the secret from your physical ticket.
                        </p>
                        
                        {% if secret %}
                            <p class="text-muted">
                                <small>Secret detected from URL: {{ secret | truncate(8) }}...</small>
                            </p>
                        {% endif %}

                        <form id="claimForm">
                            <div class="mb-3">
                                <label for="walletAddress" class="form-label">Your Wallet Address or ENS Name</label>
                                <input type="text" class="form-control" id="walletAddress" placeholder="0x... or yourname.eth" required>
                                <div class="form-text">The address where you want to receive your ticket stub NFT. ENS names are supported.</div>
                                <div id="ensResolution" class="text-muted small mt-1" style="display: none;"></div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="secretInput" class="form-label">Secret from Ticket</label>
                                <input type="text" class="form-control" id="secretInput" placeholder="Enter the secret from your physical ticket" required>
                                <div class="form-text">This should be the text or QR code content from your ticket stub</div>
                                <div id="secretFromUrl" class="text-success small mt-1" style="display: none;"></div>
                            </div>

                            <button type="submit" class="btn btn-primary">
                                Connect Wallet & Claim Ticket Stub
                            </button>
                        </form>
                    </div>
                </div>

                <div class="mt-4 bg-white p-3 rounded shadow-sm">
                    <h5>What happens when I claim?</h5>
                    <ul>
                        <li>We'll verify your secret against the ticket stub contract</li>
                        <li>If valid, the NFT will be minted to your wallet address</li>
                        <li>You'll own the digital representation of your physical ticket</li>
                        <li>The secret can only be used once</li>
                    </ul>
                </div>

                {% if show.ticketStubs and show.ticketStubs.length > 0 %}
                <div class="mt-5">
                    <div class="row">
                        <div class="col-3"></div>
                        <div id="donationModal" class="col-md-6 semi-transparent-bg p-4 rounded shadow">
                            <span class="pixel-font" style="color: white;">
                                <h2>ðŸŽµ Also Available: Strike Set Stone for This Show</h2>
                            </span>
                            <p class="text-white">Commemorate your experience with a unique set stone NFT. Select three colors from the original NES palette.</p>
                            
                            <div id="setStoneColorPicker" style="width: 100%; align-items: left; color: white;">
                                <select id="colorDropdown1" class="form-select pixel-font"></select>
                                <select id="colorDropdown2" class="form-select pixel-font"></select>
                                <select id="colorDropdown3" class="form-select pixel-font"></select>
                                <button id="randomizeColors" class="btn btn-primary mt-2 pixel-font"
                                    onclick="randomizeColors()">
                                Randomize
                            </button>
                            </div>

                            <div id="stoneRenderArea"></div>

                            <div id="crystalizationMessage">
                                <h4 class="pixel-font" style="color: white;">Crystalization message:</h4>
                                <input id="crystalizationMessageText" type="text" class="form-control"
                                   placeholder="Enter personal message">
                            </div>

                            <select id="setPicker" class="form-select pixel-font mt-2">
                                {% for set_number, set in show.sets %}
                                    <option value="{{set_number}}">Set #{{loop.index}}</option>
                                {% endfor %}
                            </select>

                            <h4 data-tippy-content="Select a song from the setlist to make it your favorite song for this set stone."
                            class="pixel-font mt-2" style="color: white;">Song of Note:</h4>
                            <select id="favoriteSongPicker" class="form-select pixel-font mt-2"></select>

                            <h4 class="pixel-font text-white">
                                <span>Minimum price:</span>
                                <span id="stonePrice"></span>
                            </h4>
                            <div class="input-group mt-2" style="width: 100%">
                                <input id="amount" class="form-control">
                                <span class="input-group-text">ETH</span>
                            </div>

                            <h3 class="pixel-font text-white">Rabbit</h3>
                            <p class="text-white">You need a secret "rabbit", distributed at the show, to buy a set stone. Each rabbit is valid to purchase one stone.</p>
                            <input id="rabbit" type="text" class="form-control"/>
                            <button id="verifyRabbit" class="btn btn-primary mt-2">Verify</button>

                            <div id="rabbitHashIconContainer" style="display: flex; flex-direction: row; align-items: center;">
                                <div id="rabbitHashIcon"></div>
                                <span id="rabbithash"></span>
                            </div>

                            <p id="verifyResult" class="text-light"></p>
                            <p id="invalidRabbitErrorMessage" style="display: none; color: red;">Invalid secret rabbit</p>

                            <div class="mt-5" style="display: flex; justify-content: space-between; width: 100%">
                                <button id="mintStone" class="btn btn-primary pixel-font"
                                        style="padding: 10px; background-color: hsl(345, 100%, 51%); border-color: hsl(345, 100%, 51%);"
                                        onclick="mintStone()">Strike SetStone
                                </button>
                                <w3m-button></w3m-button>
                            </div>

                        </div>
                        <div class="col-3"></div>
                    </div>
                </div>
                {% endif %}
            {% endif %}
        </div>
    </div>
</div>

<script>
    console.log("Script is loading...");
    
    // Simple secret population function
    function populateSecretFromUrl() {
        const urlParams = new URLSearchParams(window.location.search);
        const secretParam = urlParams.get('secret');
        console.log('Looking for secret in URL:', secretParam);
        
        if (secretParam) {
            const secretInput = document.getElementById('secretInput');
            if (secretInput) {
                secretInput.value = secretParam;
                console.log('Secret populated:', secretParam.substring(0, 8) + '...');
                
                const secretFromUrl = document.getElementById('secretFromUrl');
                if (secretFromUrl) {
                    secretFromUrl.style.display = 'block';
                    secretFromUrl.textContent = `Secret detected from URL: ${secretParam.substring(0, 8)}...`;
                }
            }
        }
    }
    
    // Run when page loads
    document.addEventListener('DOMContentLoaded', populateSecretFromUrl);
    
    // Also try immediately in case DOM is already ready
    if (document.readyState !== 'loading') {
        populateSecretFromUrl();
    }
</script>

<!-- Placeholder for future blockchain functionality -->
<script type="module">
    import { createConfig, http, writeContract, waitForTransactionReceipt, getEnsAddress } from '@wagmi/core';
    import { arbitrum, mainnet } from '@wagmi/core/chains';
    import { keccak256, toBytes, isAddress } from 'viem';

    // Contract configuration
    const TICKET_STUB_CONTRACT_ADDRESS = '{{ contractAddress }}';
    const TICKET_STUB_ABI = JSON.parse('{{ contractABI | safe }}');

    const config = createConfig({
        chains: [arbitrum, mainnet],
        transports: {
            [arbitrum.id]: http('https://arb-mainnet.g.alchemy.com/v2/{{ alchemyApiKey }}'),
            [mainnet.id]: http('https://eth-mainnet.g.alchemy.com/v2/{{ alchemyApiKey }}'),
        },
    });

    // Check for secret in URL parameters
    function checkUrlParams() {
        console.log('checkUrlParams called, current URL:', window.location.href);
        const urlParams = new URLSearchParams(window.location.search);
        const secretParam = urlParams.get('secret');
        console.log('Secret parameter from URL:', secretParam);
        
        if (secretParam) {
            const secretInput = document.getElementById('secretInput');
            const secretFromUrl = document.getElementById('secretFromUrl');
            
            console.log('Found secret input element:', !!secretInput);
            console.log('Found secretFromUrl element:', !!secretFromUrl);
            
            if (secretInput && secretFromUrl) {
                secretInput.value = secretParam;
                secretFromUrl.style.display = 'block';
                secretFromUrl.textContent = `Secret detected from URL: ${secretParam.substring(0, 8)}...`;
                console.log('Secret populated successfully:', secretParam.substring(0, 8) + '...');
            } else {
                console.log('Missing DOM elements for secret population');
            }
        } else {
            console.log('No secret parameter found in URL');
        }
    }

    // ENS resolution for address field
    async function resolveENS(ensName) {
        try {
            if (ensName.endsWith('.eth')) {
                const address = await getEnsAddress(config, {
                    name: ensName,
                    chainId: mainnet.id
                });
                return address;
            }
        } catch (error) {
            console.error('ENS resolution error:', error);
            return null;
        }
        return null;
    }

    // Address field validation and ENS resolution
    document.getElementById('walletAddress').addEventListener('input', async function(e) {
        const value = e.target.value.trim();
        const ensDiv = document.getElementById('ensResolution');
        
        if (value.endsWith('.eth')) {
            ensDiv.style.display = 'block';
            ensDiv.textContent = 'Resolving ENS name...';
            ensDiv.className = 'text-muted small mt-1';
            
            const resolvedAddress = await resolveENS(value);
            if (resolvedAddress) {
                ensDiv.textContent = `Resolves to: ${resolvedAddress}`;
                ensDiv.className = 'text-success small mt-1';
            } else {
                ensDiv.textContent = 'ENS name not found';
                ensDiv.className = 'text-danger small mt-1';
            }
        } else if (isAddress(value)) {
            ensDiv.style.display = 'block';
            ensDiv.textContent = 'Valid Ethereum address';
            ensDiv.className = 'text-success small mt-1';
        } else if (value.length > 0) {
            ensDiv.style.display = 'block';
            ensDiv.textContent = 'Invalid address format';
            ensDiv.className = 'text-danger small mt-1';
        } else {
            ensDiv.style.display = 'none';
        }
    });

    document.getElementById('claimForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        let walletAddress = document.getElementById('walletAddress').value.trim();
        const secret = document.getElementById('secretInput').value;
        
        if (!walletAddress || !secret) {
            alert('Please fill in all fields');
            return;
        }

        // Resolve ENS if needed
        if (walletAddress.endsWith('.eth')) {
            const resolvedAddress = await resolveENS(walletAddress);
            if (!resolvedAddress) {
                alert('Could not resolve ENS name. Please use a valid Ethereum address.');
                return;
            }
            walletAddress = resolvedAddress;
        }

        // Validate address
        if (!isAddress(walletAddress)) {
            alert('Please enter a valid Ethereum address or ENS name');
            return;
        }

        try {
            // Convert secret to bytes32
            const secretBytes = keccak256(toBytes(secret));
            
            // Show loading state
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Claiming...';
            submitBtn.disabled = true;

            // Call the contract
            const hash = await writeContract(config, {
                abi: TICKET_STUB_ABI,
                address: TICKET_STUB_CONTRACT_ADDRESS,
                functionName: 'claimTicketStub',
                args: [secretBytes],
                account: walletAddress,
            });

            // Wait for transaction confirmation
            const receipt = await waitForTransactionReceipt(config, {
                hash,
            });

            // Redirect to success page
            window.location.href = `?success=true&hash=${hash}`;

        } catch (error) {
            console.error('Error claiming ticket stub:', error);
            alert('Error claiming ticket stub: ' + error.message);
            
            // Reset button
            const submitBtn = e.target.querySelector('button[type="submit"]');
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
        }
    });

    // Initialize page when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            checkUrlParams();
            // Try again after a short delay in case elements aren't ready
            setTimeout(checkUrlParams, 100);
        });
    } else {
        checkUrlParams();
        // Try again after a short delay in case elements aren't ready
        setTimeout(checkUrlParams, 100);
    }
</script>

<style>
    .responsive-ticket-stub {
        max-width: 100%;
        overflow: hidden;
    }
    
    .responsive-ticket-stub > div {
        transform: scale(0.8);
        transform-origin: top left;
        width: 125%;
    }
    
    /* Mobile phones */
    @media (max-width: 576px) {
        .responsive-ticket-stub > div {
            transform: scale(0.6);
            width: 167%;
        }
    }
    
    /* Small tablets */
    @media (min-width: 577px) and (max-width: 768px) {
        .responsive-ticket-stub > div {
            transform: scale(0.7);
            width: 143%;
        }
    }
    
    /* Medium tablets and up */
    @media (min-width: 769px) and (max-width: 991px) {
        .responsive-ticket-stub > div {
            transform: scale(0.75);
            width: 133%;
        }
    }
    
    /* Desktop */
    @media (min-width: 992px) {
        .responsive-ticket-stub > div {
            transform: scale(0.8);
            width: 125%;
        }
    }
    .ticket-stub-number {
        position:absolute;
    }
    
    /* Set stone interface styling */
    .semi-transparent-bg {
        background: linear-gradient(90deg, rgba(64, 70, 84, 0.7) 0%, rgba(58, 58, 62, .84) 100%);
        border-radius: 15px;
    }
    
    .pixel-font {
        font-family: 'll-pixel', monospace;
    }
</style>

<!-- Include set stone functionality -->
<script src="/js/bazaar/strike_set_stones.js"></script>
{% endblock %}